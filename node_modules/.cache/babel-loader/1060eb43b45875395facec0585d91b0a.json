{"ast":null,"code":"import { get as r, set as i } from \"react-hook-form\";\n\nvar e = function (i, e, t) {\n  if (i && \"reportValidity\" in i) {\n    var f = r(t, e);\n    i.setCustomValidity(f && f.message || \"\"), i.reportValidity();\n  }\n},\n    t = function (r, i) {\n  var t = function (t) {\n    var f = i.fields[t];\n    f && f.ref && \"reportValidity\" in f.ref ? e(f.ref, t, r) : f.refs && f.refs.forEach(function (i) {\n      return e(i, t, r);\n    });\n  };\n\n  for (var f in i.fields) t(f);\n},\n    f = function (e, f) {\n  f.shouldUseNativeValidation && t(e, f);\n  var o = {};\n\n  for (var a in e) {\n    var n = r(f.fields, a);\n    i(o, a, Object.assign(e[a], {\n      ref: n && n.ref\n    }));\n  }\n\n  return o;\n};\n\nexport { f as toNestError, t as validateFieldsNatively };","map":{"version":3,"mappings":";;AAIA,IAAMA,IAAoB,UAACC,CAAD,EAAWC,CAAX,EAA8BC,CAA9B,EAA8BA;AACtD,MAAIF,KAAO,oBAAoBA,CAA/B,EAAoC;AAClC,QAAMG,IAAQC,EAAIF,CAAJE,EAAYH,CAAZG,CAAd;AACAJ,MAAID,iBAAJC,CAAuBG,KAASA,EAAME,OAAfF,IAA2B,EAAlDH,GAEAA,EAAIM,cAAJN,EAFAA;AAEIM;AAAAA,CALR;AAAA,IAUaC,IAAyB,UACpCL,CADoC,EAEpCM,CAFoC,EAEpCA;AAAAA,oBAIWP,CAJXO,EAIWP;AACT,QAAMQ,IAAQD,EAAQE,MAARF,CAAeP,CAAfO,CAAd;AACIC,SAASA,EAAMT,GAAfS,IAAsB,oBAAoBA,EAAMT,GAAhDS,GACFV,EAAkBU,EAAMT,GAAxBD,EAA6BE,CAA7BF,EAAwCG,CAAxCH,CADEU,GAEOA,EAAME,IAANF,IACTA,EAAME,IAANF,CAAWG,OAAXH,CAAmB,UAACT,CAAD,EAACA;AAAAA,aAA0BD,EAAkBC,CAAlBD,EAAuBE,CAAvBF,EAAkCG,CAAlCH,CAA1BC;AAA4DE,KAAhFO,CAHEA;AAG8EP,GATpFM;;AAIA,OAAK,IAAMP,CAAX,IAAwBO,EAAQE,MAAhC,EAAgCA,EAArBT,CAAqBS;AAArBT,CAhBb;AAAA,ICMaY,IAAc,UACzBX,CADyB,EAEzBM,CAFyB,EAEzBA;AAEAA,IAAQM,yBAARN,IAAqCD,EAAuBL,CAAvBK,EAA+BC,CAA/BD,CAArCC;AAEA,MAAMO,IAAc,EAApB;;AACA,OAAK,IAAMC,CAAX,IAAmBd,CAAnB,EAA2B;AACzB,QAAMO,IAAQL,EAAII,EAAQE,MAAZN,EAAoBY,CAApBZ,CAAd;AAEAa,MACEF,CADFE,EAEED,CAFFC,EAGEC,OAAOC,MAAPD,CAAchB,EAAOc,CAAPd,CAAdgB,EAA4B;AAAElB,WAAKS,KAASA,EAAMT;AAAtB,KAA5BkB,CAHFD;AAOF;;AAAA,SAAOF,CAAP;AAAOA,CDvBT;;ACuBSA","names":["setCustomValidity","ref","fieldPath","errors","error","get","message","reportValidity","validateFieldsNatively","options","field","fields","refs","forEach","toNestError","shouldUseNativeValidation","fieldErrors","path","set","Object","assign"],"sources":["/Users/anthonyg/Desktop/vote_share/client/node_modules/@hookform/resolvers/src/validateFieldsNatively.ts","/Users/anthonyg/Desktop/vote_share/client/node_modules/@hookform/resolvers/src/toNestError.ts"],"sourcesContent":["import {\n  get, FieldError, ResolverOptions, Ref\n} from 'react-hook-form';\n\nconst setCustomValidity = (ref: Ref, fieldPath: string, errors: Record<string, FieldError>) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n\n\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors)\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) => setCustomValidity(ref, fieldPath, errors))\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldError,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: Record<string, FieldError>,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n"]},"metadata":{},"sourceType":"module"}