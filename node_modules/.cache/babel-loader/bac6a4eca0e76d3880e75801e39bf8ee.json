{"ast":null,"code":"var _jsxFileName = \"/Users/anthonyg/Desktop/vote_share/client/src/containers/PollContainer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext, useEffect } from 'react';\nimport { PollContext } from '../PollContext';\nimport PollService from '../poll.service.js';\nimport Option from '../components/Option';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function PollContainer(_ref) {\n  _s();\n\n  var _pollValue$options;\n\n  let {\n    props\n  } = _ref;\n  const {\n    loggedIn,\n    poll\n  } = useContext(PollContext);\n  const [isLoggedIn, setLoggedIn] = loggedIn;\n  const [pollValue, setPollValue] = poll;\n  const params = useParams();\n  useEffect(() => {\n    if (Object.keys(pollValue).length === 0) {\n      PollService.getPoll(params.id).then(data => {\n        setPollValue(data.poll);\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", pollValue === null || pollValue === void 0 ? void 0 : pollValue.subject, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), pollValue === null || pollValue === void 0 ? void 0 : (_pollValue$options = pollValue.options) === null || _pollValue$options === void 0 ? void 0 : _pollValue$options.map(opt => {\n      return /*#__PURE__*/_jsxDEV(Option, {\n        props: opt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 16\n      }, this);\n    })]\n  }, void 0, true);\n}\n\n_s(PollContainer, \"FSi5A0zbZXov+Iyg5nVUfItcThI=\", false, function () {\n  return [useParams];\n});\n\n_c = PollContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PollContainer\");","map":{"version":3,"sources":["/Users/anthonyg/Desktop/vote_share/client/src/containers/PollContainer.js"],"names":["useState","useContext","useEffect","PollContext","PollService","Option","useParams","PollContainer","props","loggedIn","poll","isLoggedIn","setLoggedIn","pollValue","setPollValue","params","Object","keys","length","getPoll","id","then","data","subject","options","map","opt"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,SAAT,QAA0B,kBAA1B;;;AAEA,eAAe,SAASC,aAAT,OAA+B;AAAA;;AAAA;;AAAA,MAAR;AAACC,IAAAA;AAAD,GAAQ;AAC5C,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAqBT,UAAU,CAACE,WAAD,CAArC;AACA,QAAM,CAACQ,UAAD,EAAaC,WAAb,IAA4BH,QAAlC;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BJ,IAAlC;AAEA,QAAMK,MAAM,GAAGT,SAAS,EAAxB;AAEAJ,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAGc,MAAM,CAACC,IAAP,CAAYJ,SAAZ,EAAuBK,MAAvB,KAAkC,CAArC,EAAwC;AACtCd,MAAAA,WAAW,CAACe,OAAZ,CAAoBJ,MAAM,CAACK,EAA3B,EAA+BC,IAA/B,CAAqCC,IAAD,IAAU;AAC5CR,QAAAA,YAAY,CAACQ,IAAI,CAACZ,IAAN,CAAZ;AACD,OAFD;AAGD;AACF,GANQ,EAMP,EANO,CAAT;AAQA,sBACE;AAAA,4BACE;AAAA,sBAAMG,SAAN,aAAMA,SAAN,uBAAMA,SAAS,CAAEU,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGV,SAFH,aAEGA,SAFH,6CAEGA,SAAS,CAAEW,OAFd,uDAEG,mBAAoBC,GAApB,CAAwBC,GAAG,IAAI;AAC9B,0BAAO,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAEA;AAAf;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFA,CAFH;AAAA,kBADF;AAQD;;GAvBuBnB,a;UAKPD,S;;;KALOC,a","sourcesContent":["import { useState, useContext, useEffect } from 'react'\nimport { PollContext } from '../PollContext'\nimport PollService from '../poll.service.js'\nimport Option from '../components/Option'\nimport { useParams } from 'react-router-dom'\n\nexport default function PollContainer({props}){\n  const { loggedIn, poll } = useContext(PollContext)\n  const [isLoggedIn, setLoggedIn] = loggedIn;\n  const [pollValue, setPollValue] = poll;\n\n  const params = useParams();\n\n  useEffect(()=>{\n    if(Object.keys(pollValue).length === 0) {\n      PollService.getPoll(params.id).then((data) => {\n        setPollValue(data.poll)\n      })\n    }\n  },[])\n\n  return(\n    <>\n      <h1> {pollValue?.subject} </h1>\n      {pollValue?.options?.map(opt => {\n        return <Option props={opt} />\n      })}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}