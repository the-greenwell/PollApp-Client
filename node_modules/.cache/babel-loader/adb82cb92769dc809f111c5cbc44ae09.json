{"ast":null,"code":"import { validateFieldsNatively as e, toNestError as t } from \"@hookform/resolvers\";\nimport { appendErrors as r } from \"react-hook-form\";\n\nvar o = function (o, n, a) {\n  return void 0 === n && (n = {}), void 0 === a && (a = {}), function (s, i, c) {\n    try {\n      return Promise.resolve(function (t, r) {\n        try {\n          var u = (n.context && \"development\" === process.env.NODE_ENV && console.warn(\"You should not used the yup options context. Please, use the 'useForm' context object instead\"), Promise.resolve(o[\"sync\" === a.mode ? \"validateSync\" : \"validate\"](s, Object.assign({\n            abortEarly: !1\n          }, n, {\n            context: i\n          }))).then(function (t) {\n            return c.shouldUseNativeValidation && e({}, c), {\n              values: t,\n              errors: {}\n            };\n          }));\n        } catch (e) {\n          return r(e);\n        }\n\n        return u && u.then ? u.then(void 0, r) : u;\n      }(0, function (e) {\n        if (!e.inner) throw e;\n        return {\n          values: {},\n          errors: t((o = e, n = !c.shouldUseNativeValidation && \"all\" === c.criteriaMode, (o.inner || []).reduce(function (e, t) {\n            if (e[t.path] || (e[t.path] = {\n              message: t.message,\n              type: t.type\n            }), n) {\n              var o = e[t.path].types,\n                  a = o && o[t.type];\n              e[t.path] = r(t.path, n, e, t.type, a ? [].concat(a, t.message) : t.message);\n            }\n\n            return e;\n          }, {})), c)\n        };\n        var o, n;\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n};\n\nexport { o as yupResolver };","map":{"version":3,"mappings":";;;AASA,IA+BaA,IACX,UAACC,CAAD,EAASC,CAAT,EAA6BC,CAA7B,EAA6BA;AAAAA,oBAApBD,CAAoBC,KAApBD,IAAgB,EAAIC,GAAJ,WAAIA,CAAJ,KAAIA,IAAkB,EAAtB,CAAIA,EAAkB,UACxCC,CADwC,EAChCC,CADgC,EACvBC,CADuB,EACvBA;AAAAA;AAAAA;AAAAA;AAAAA,mBAEhBJ,EAAcG,OAAdH,IAAkD,kBAAzBK,QAAQC,GAARD,CAAYE,QAArCP,IAEFQ,QAAQC,IAARD,CACE,+FADFA,CAFER,EAGAU,gBAIiBX,EACM,WAAzBE,EAAgBU,IAAS,GAAS,cAAT,GAA0B,UADhCZ,EAGnBG,CAHmBH,EAInBa,OAAOC,MAAPD,CAAc;AAAEE,yBAAY;AAAd,WAAdF,EAAqCZ,CAArCY,EAAoD;AAAET;AAAF,WAApDS,CAJmBb,CAJjB,EAQoDI,IARpD,CAQoDA,UAJlDY,CAIkDZ,EAJlDY;AASN,mBAFAX,EAAQY,yBAARZ,IAAqCa,EAAuB,EAAvBA,EAA2Bb,CAA3Ba,CAArCb,EAEO;AACLF,sBAAQa,CADH;AAELG,sBAAQ;AAFH,aAAP;AAEU,WAfN,CALgBd;AAoBV,SApBUA,CAoBV;AAAA;AAAA;;AAAA;AAAA,OApBUA,CAoBV,CApBUA,EAoBV,UAEHe,CAFG,EAEHA;AACP,aAAKA,EAAEC,KAAP,EACE,MAAMD,CAAN;AAGF,eAAO;AACLjB,kBAAQ,EADH;AAELgB,kBAAQG,GA7DdC,IA+DUH,CA/DVG,EACAC,KA+DWnB,EAAQY,yBA/DnBO,IAgEqC,UAAzBnB,EAAQoB,YAjEpBF,EAiEoBE,CA9DZF,EAAMF,KAANE,IAAe,EA8DHE,EA9DOC,MA8DPD,CA7DlB,UAACE,CAAD,EAAWJ,CAAX,EAAWA;AAKT,gBAJKI,EAASJ,EAAMK,IAAfD,MACHA,EAASJ,EAAMK,IAAfD,IAAwB;AAAEE,uBAASN,EAAMM,OAAjB;AAA0BC,oBAAMP,EAAMO;AAAtC,aADrBH,GAIDH,CAAJ,EAA8B;AAC5B,kBAAMO,IAAQJ,EAASJ,EAAMK,IAAfD,EAAsBI,KAApC;AAAA,kBACMC,IAAWD,KAASA,EAAMR,EAAMO,IAAZC,CAD1B;AAGAJ,gBAASJ,EAAMK,IAAfD,IAAwBM,EACtBV,EAAMK,IADgBK,EAEtBT,CAFsBS,EAGtBN,CAHsBM,EAItBV,EAAMO,IAJgBG,EAKtBD,IACK,GAAgBE,MAAhB,CAAuBF,CAAvB,EAA6CT,EAAMM,OAAnD,CADLG,GAEIT,EAAMM,OAPYI,CAAxBN;AAWF;;AAAA,mBAAOA,CAAP;AAAOA,WAyCSF,EAvClB,EAuCkBA,CAJNH,GAMNjB,CANMiB;AAFH,SAAP;AA5DmB,YACvBC,CADuB,EAEvBC,CAFuB;AAEvBA,OA+BwBnB;AADxB,KACwBA,CADxB;AAAA;AAAA;AAAA,GAA6BH;AAA7B,CAhCF;;AAgCE","names":["yupResolver","schema","schemaOptions","resolverOptions","values","context","options","process","env","NODE_ENV","console","warn","Promise","mode","Object","assign","abortEarly","result","shouldUseNativeValidation","validateFieldsNatively","errors","e","inner","toNestError","error","validateAllFieldCriteria","criteriaMode","reduce","previous","path","message","type","types","messages","appendErrors","concat"],"sources":["/Users/anthonyg/Desktop/vote_share/client/node_modules/@hookform/resolvers/yup/src/yup.ts"],"sourcesContent":["import Yup from 'yup';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}