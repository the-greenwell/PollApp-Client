{"ast":null,"code":"var _jsxFileName = \"/Users/anthonyg/Desktop/vote_share/client/src/containers/PollContainer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext, useEffect } from 'react';\nimport { PollContext } from '../PollContext';\nimport PollService from '../poll.service.js';\nimport ShareLink from '../components/ShareLink';\nimport Option from '../components/Option';\nimport CountDown from '../components/CountDown';\nimport '../styles/poll.css';\nimport { capitalize, formatTime } from '../helpers.js';\nimport moment from 'moment';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PollContainer() {\n  _s();\n\n  var _pollValue$options;\n\n  const {\n    loggedIn,\n    poll\n  } = useContext(PollContext);\n  const [isLoggedIn, setLoggedIn] = loggedIn;\n  const [pollValue, setPollValue] = poll;\n  const params = useParams();\n\n  const voteHandler = optionId => {\n    PollService.castVote(pollValue._id, optionId).then(data => {\n      setPollValue({ ...pollValue,\n        options: data.updatedOptions\n      });\n    });\n  };\n\n  const formatCountdown = () => {\n    let diffTime = moment(pollValue.expires).valueOf() - moment().valueOf();\n    let duration = moment.duration(diffTime, 'milliseconds');\n\n    if (duration._milliseconds > 0) {\n      return { ...formatTime(duration._milliseconds)\n      };\n    }\n  };\n\n  const [timeLeft, setTimeLeft] = useState(formatCountdown());\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setTimeLeft(formatCountdown());\n    }, 1000);\n    return () => clearTimeout(timer);\n  });\n  useEffect(() => {\n    if (Object.keys(pollValue).length === 0) {\n      PollService.getPoll(params.id).then(data => {\n        setPollValue(data.poll);\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pollContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", pollValue.subject && capitalize(pollValue.subject), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountDown, {\n      props: timeLeft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options\",\n      children: pollValue === null || pollValue === void 0 ? void 0 : (_pollValue$options = pollValue.options) === null || _pollValue$options === void 0 ? void 0 : _pollValue$options.map(opt => {\n        return /*#__PURE__*/_jsxDEV(Option, {\n          props: {\n            option: opt,\n            voteHandler: voteHandler\n          }\n        }, opt._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ShareLink, {\n      props: {\n        shareLink: `${window.location.origin}/poll/${pollValue._id}`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PollContainer, \"dRHUZ8sS8I3CtZPjh1UUbTuQQZ4=\", false, function () {\n  return [useParams];\n});\n\n_c = PollContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PollContainer\");","map":{"version":3,"sources":["/Users/anthonyg/Desktop/vote_share/client/src/containers/PollContainer.js"],"names":["useState","useContext","useEffect","PollContext","PollService","ShareLink","Option","CountDown","capitalize","formatTime","moment","useParams","PollContainer","loggedIn","poll","isLoggedIn","setLoggedIn","pollValue","setPollValue","params","voteHandler","optionId","castVote","_id","then","data","options","updatedOptions","formatCountdown","diffTime","expires","valueOf","duration","_milliseconds","timeLeft","setTimeLeft","timer","setTimeout","clearTimeout","Object","keys","length","getPoll","id","subject","map","opt","option","shareLink","window","location","origin"],"mappings":"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","sourcesContent":["import { useState, useContext, useEffect } from 'react'\nimport { PollContext } from '../PollContext'\nimport PollService from '../poll.service.js'\nimport ShareLink from '../components/ShareLink'\nimport Option from '../components/Option'\nimport CountDown from '../components/CountDown'\nimport '../styles/poll.css'\n\nimport { capitalize, formatTime } from '../helpers.js'\n\nimport moment from 'moment'\nimport { useParams } from 'react-router-dom'\n\nexport default function PollContainer(){\n  const { loggedIn, poll } = useContext(PollContext)\n  const [isLoggedIn, setLoggedIn] = loggedIn;\n  const [pollValue, setPollValue] = poll;\n\n  const params = useParams();\n\n  const voteHandler = (optionId) => {\n    PollService.castVote(pollValue._id,optionId).then((data)=>{\n      setPollValue({...pollValue, options: data.updatedOptions})\n    })\n  }\n  const formatCountdown = () => {\n    let diffTime = moment(pollValue.expires).valueOf() - moment().valueOf()\n    let duration = moment.duration(diffTime, 'milliseconds')\n    if(duration._milliseconds > 0) {\n      return {...formatTime(duration._milliseconds)}\n    }\n  }\n  const [timeLeft, setTimeLeft] = useState(formatCountdown());\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setTimeLeft(formatCountdown());\n    }, 1000);\n    return () => clearTimeout(timer);\n  });\n\n  useEffect(()=>{\n    if(Object.keys(pollValue).length === 0) {\n      PollService.getPoll(params.id).then((data) => {\n        setPollValue(data.poll)\n      })\n    }\n  },[])\n\n  return(\n    <div className='pollContainer'>\n      <h1> {pollValue.subject && capitalize(pollValue.subject)} </h1>\n\n      <CountDown props={timeLeft}/>\n\n      <div className='options'>\n        {pollValue?.options?.map(opt => {\n          return <Option key={opt._id} props={{option:opt,voteHandler:voteHandler}} />\n        })}\n      </div>\n\n      <ShareLink props={{shareLink: `${window.location.origin}/poll/${pollValue._id}`}}/>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}