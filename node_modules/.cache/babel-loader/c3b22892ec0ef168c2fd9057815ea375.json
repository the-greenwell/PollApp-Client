{"ast":null,"code":"import axios from 'axios';\nconst url = 'http://localhost:3001/poll';\n\nclass PollService {\n  newPoll(data) {\n    const body = {\n      subject: data.subject,\n      password: data.password,\n      options: data.options,\n      expires: data.expires,\n      format: data.format\n    };\n    return axios.post(url + '/newpoll', body).then(res => {\n      return res.data;\n    }).catch(err => {\n      return err;\n    });\n  }\n\n  getPoll(id) {\n    return axios.get(`${url}/${id}`).then(res => {\n      return res.data;\n    }).catch(err => {\n      return err;\n    });\n  }\n\n  checkVote(id) {\n    if (localStorage.getItem(id) === 'voted') {\n      return true;\n    }\n\n    return false;\n  }\n\n  castVote(id, option) {\n    if (this.checkVote(id) === true) {\n      throw new Error('Already Voted');\n    } else {\n      return axios.patch(`${url}/${id}/${option}`).then(res => {\n        var _res$data;\n\n        if (!((_res$data = res.data) !== null && _res$data !== void 0 && _res$data.error)) {\n          localStorage.setItem(id, 'voted');\n          return res.data;\n        }\n\n        throw new Error(res.data.error);\n      }).catch(err => {\n        throw new Error(err.message);\n      });\n    }\n  }\n\n}\n\nexport default new PollService();","map":{"version":3,"sources":["/Users/anthonyg/Desktop/vote_share/client/src/poll.service.js"],"names":["axios","url","PollService","newPoll","data","body","subject","password","options","expires","format","post","then","res","catch","err","getPoll","id","get","checkVote","localStorage","getItem","castVote","option","Error","patch","error","setItem","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,GAAG,GAAG,4BAAZ;;AAEA,MAAMC,WAAN,CAAkB;AAEhBC,EAAAA,OAAO,CAACC,IAAD,EAAM;AACX,UAAMC,IAAI,GAAG;AAACC,MAAAA,OAAO,EAACF,IAAI,CAACE,OAAd;AAAsBC,MAAAA,QAAQ,EAACH,IAAI,CAACG,QAApC;AAA6CC,MAAAA,OAAO,EAACJ,IAAI,CAACI,OAA1D;AAAkEC,MAAAA,OAAO,EAACL,IAAI,CAACK,OAA/E;AAAuFC,MAAAA,MAAM,EAACN,IAAI,CAACM;AAAnG,KAAb;AACA,WAAOV,KAAK,CAACW,IAAN,CAAWV,GAAG,GAAG,UAAjB,EAA6BI,IAA7B,EAAmCO,IAAnC,CAAyCC,GAAD,IAAO;AACpD,aAAOA,GAAG,CAACT,IAAX;AACD,KAFM,EAEJU,KAFI,CAEGC,GAAD,IAAO;AACd,aAAOA,GAAP;AACD,KAJM,CAAP;AAKD;;AAEDC,EAAAA,OAAO,CAACC,EAAD,EAAI;AACT,WAAOjB,KAAK,CAACkB,GAAN,CAAW,GAAEjB,GAAI,IAAGgB,EAAG,EAAvB,EAA0BL,IAA1B,CAAgCC,GAAD,IAAO;AAC3C,aAAOA,GAAG,CAACT,IAAX;AACD,KAFM,EAEJU,KAFI,CAEGC,GAAD,IAAO;AACd,aAAOA,GAAP;AACD,KAJM,CAAP;AAKD;;AAEDI,EAAAA,SAAS,CAACF,EAAD,EAAI;AACX,QAAGG,YAAY,CAACC,OAAb,CAAqBJ,EAArB,MAA6B,OAAhC,EAAyC;AACvC,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAEDK,EAAAA,QAAQ,CAACL,EAAD,EAAIM,MAAJ,EAAW;AACf,QAAG,KAAKJ,SAAL,CAAeF,EAAf,MAAuB,IAA1B,EAAiC;AAC/B,YAAM,IAAIO,KAAJ,CAAU,eAAV,CAAN;AACD,KAFD,MAEO;AACL,aAAOxB,KAAK,CAACyB,KAAN,CAAa,GAAExB,GAAI,IAAGgB,EAAG,IAAGM,MAAO,EAAnC,EAAsCX,IAAtC,CAA4CC,GAAD,IAAO;AAAA;;AACvD,YAAG,eAACA,GAAG,CAACT,IAAL,sCAAC,UAAUsB,KAAX,CAAH,EAAoB;AAClBN,UAAAA,YAAY,CAACO,OAAb,CAAqBV,EAArB,EAAyB,OAAzB;AACA,iBAAOJ,GAAG,CAACT,IAAX;AACD;;AACD,cAAM,IAAIoB,KAAJ,CAAUX,GAAG,CAACT,IAAJ,CAASsB,KAAnB,CAAN;AACD,OANM,EAMJZ,KANI,CAMGC,GAAD,IAAS;AAChB,cAAM,IAAIS,KAAJ,CAAUT,GAAG,CAACa,OAAd,CAAN;AACD,OARM,CAAP;AASD;AACJ;;AAxCe;;AA4ClB,eAAe,IAAI1B,WAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\nconst url = 'http://localhost:3001/poll';\n\nclass PollService {\n\n  newPoll(data){\n    const body = {subject:data.subject,password:data.password,options:data.options,expires:data.expires,format:data.format};\n    return axios.post(url + '/newpoll', body).then((res)=>{\n      return res.data\n    }).catch((err)=>{\n      return err\n    })\n  }\n\n  getPoll(id){\n    return axios.get(`${url}/${id}`).then((res)=>{\n      return res.data\n    }).catch((err)=>{\n      return err\n    })\n  }\n\n  checkVote(id){\n    if(localStorage.getItem(id) === 'voted') {\n      return true;\n    }\n    return false;\n  }\n\n  castVote(id,option){\n      if(this.checkVote(id) === true)  {\n        throw new Error('Already Voted')\n      } else {\n        return axios.patch(`${url}/${id}/${option}`).then((res)=>{\n          if(!res.data?.error){\n            localStorage.setItem(id, 'voted')\n            return res.data\n          }\n          throw new Error(res.data.error)\n        }).catch((err) => {\n          throw new Error(err.message)\n        })\n      }\n  }\n\n}\n\nexport default new PollService();\n"]},"metadata":{},"sourceType":"module"}