{"ast":null,"code":"var _jsxFileName = \"/Users/anthonyg/Desktop/vote_share/client/src/components/PollForm.js\",\n    _s = $RefreshSig$();\n\nimport Select from './Select';\nimport Input from './Input';\nimport '../styles/form.css';\nimport { newPollFields, updatePollFields } from '../helpers.js';\nimport { useState, useEffect } from 'react';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PollForm(_ref) {\n  _s();\n\n  let {\n    type\n  } = _ref;\n  const [formFields, setFields] = useState([]);\n  const [options, setOptionsTotal] = useState(2);\n  const validationSchema = Yup.object().shape({\n    subject: Yup.string().required('Subject is required'),\n    password: Yup.string().required('Password is required').min(6, 'Password must be 6 characters'),\n    confirmPassword: Yup.string().required('Confirm Password is required').oneOf([Yup.ref('password')], 'Passwords must match'),\n    format: Yup.string().default('default'),\n    expires: Yup.number().positive().integer().default(5).min(1).max(300),\n    options: Yup.array().of(Yup.object().shape({\n      description: Yup.string()\n    }))\n  });\n  const formOptions = {\n    resolver: yupResolver(validationSchema)\n  };\n  const {\n    handleSubmit,\n    register,\n    control,\n    reset,\n    formState\n  } = useForm();\n  const errors = formState;\n  const {\n    fields,\n    append,\n    remove\n  } = useFieldArray({\n    name: 'options',\n    control\n  });\n  useEffect(() => {\n    type === 'newPoll' ? setFields(newPollFields) : setFields(updatePollFields);\n  }, []);\n  useEffect(() => {\n    // update field array when ticket number changed\n    const oldVal = fields.length;\n\n    if (options > oldVal && oldVal < 8 || oldVal < 2) {\n      // append tickets to field array\n      for (let i = oldVal; i < options; i++) {\n        append({\n          description: ''\n        });\n      }\n    } else {\n      // remove tickets from field array\n      for (let i = oldVal; i > options; i--) {\n        remove(i - 1);\n      }\n    }\n  }, [options]);\n\n  const increaseOptions = e => {\n    e.preventDefault();\n    if (options < 8) setOptionsTotal(options + 1);\n  };\n\n  const decreaseOptions = e => {\n    e.preventDefault();\n    if (options > 2) setOptionsTotal(options - 1);\n  };\n\n  const onSubmit = data => {\n    console.log(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [type === 'newPoll' ? /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increaseOptions,\n        children: \"Add Option\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decreaseOptions,\n        children: \"Delete Option\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }, this) : '', errors ? Object.keys(errors).map(err => {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: err.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this);\n    }) : '', formFields.map(x => {\n      return x.type === 'select' ? /*#__PURE__*/_jsxDEV(Select, {\n        props: x,\n        register: register\n      }, x.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(Input, {\n        props: x,\n        register: register\n      }, x.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }, this);\n    }), fields.map((x, i) => {\n      return /*#__PURE__*/_jsxDEV(Input, {\n        props: {\n          type: 'text',\n          focus: true,\n          name: `options.${i}.description`,\n          label: `Option ${i + 1}`\n        },\n        register: register\n      }, x.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 7\n  }, this);\n}\n\n_s(PollForm, \"deW1OU7m/OEaAg+CDn3c6PQBSvc=\", false, function () {\n  return [useForm, useFieldArray];\n});\n\n_c = PollForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PollForm\");","map":{"version":3,"sources":["/Users/anthonyg/Desktop/vote_share/client/src/components/PollForm.js"],"names":["Select","Input","newPollFields","updatePollFields","useState","useEffect","useForm","useFieldArray","yupResolver","Yup","PollForm","type","formFields","setFields","options","setOptionsTotal","validationSchema","object","shape","subject","string","required","password","min","confirmPassword","oneOf","ref","format","default","expires","number","positive","integer","max","array","of","description","formOptions","resolver","handleSubmit","register","control","reset","formState","errors","fields","append","remove","name","oldVal","length","i","increaseOptions","e","preventDefault","decreaseOptions","onSubmit","data","console","log","Object","keys","map","err","message","x","focus","label","id"],"mappings":"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","sourcesContent":["import Select from './Select'\nimport Input from './Input'\nimport '../styles/form.css'\nimport { newPollFields, updatePollFields } from '../helpers.js'\n\nimport { useState, useEffect } from 'react'\nimport { useForm, useFieldArray } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\n\nexport default function PollForm({ type }){\n    const [formFields,setFields] = useState([]);\n    const [options,setOptionsTotal] = useState(2);\n\n    const validationSchema = Yup.object().shape({\n      subject: Yup.string().required('Subject is required'),\n      password: Yup.string().required('Password is required').min(6, 'Password must be 6 characters'),\n      confirmPassword: Yup.string().required('Confirm Password is required').oneOf([Yup.ref('password')], 'Passwords must match'),\n      format: Yup.string().default('default'),\n      expires: Yup.number().positive().integer().default(5).min(1).max(300),\n      options: Yup.array().of(\n        Yup.object().shape({\n          description: Yup.string()\n        })\n      )\n    });\n    const formOptions = {resolver: yupResolver(validationSchema)}\n\n    const {\n      handleSubmit,\n      register,\n      control,\n      reset,\n      formState\n    } = useForm()\n\n    const errors = formState;\n\n    const { fields, append, remove } = useFieldArray({name: 'options', control})\n\n\n    useEffect(()=>{\n      type === 'newPoll' ?\n          setFields(newPollFields) : setFields(updatePollFields);\n      },[])\n\n    useEffect(() => {\n       // update field array when ticket number changed\n       const oldVal = fields.length;\n       if (options > oldVal && oldVal < 8 || oldVal < 2) {\n           // append tickets to field array\n           for (let i = oldVal; i < options; i++) {\n               append({description: ''});\n           }\n       } else {\n           // remove tickets from field array\n           for (let i = oldVal; i > options; i--) {\n               remove(i - 1);\n           }\n       }\n    }, [options]);\n\n    const increaseOptions = (e) => {\n      e.preventDefault();\n      if(options < 8) setOptionsTotal(options + 1)\n    }\n\n    const decreaseOptions = (e) => {\n      e.preventDefault();\n      if(options > 2) setOptionsTotal(options - 1)\n    }\n\n    const onSubmit = (data) => {\n      console.log(data)\n    }\n\n    return(\n      <form className='form' onSubmit={handleSubmit(onSubmit)}>\n        { type === 'newPoll'  ?  (\n          <span>\n            <button onClick={increaseOptions}>Add Option</button>\n            <button onClick={decreaseOptions}>Delete Option</button>\n            <button type='submit'>Submit Form</button>\n          </span>\n        ) : ''}\n        {\n          errors ? Object.keys(errors).map(err =>{\n          return (\n            <p>{err.message}</p>\n          )\n        }) : ''\n\n      }\n        {formFields.map(x => {\n          return (\n            x.type === 'select' ?\n              <Select\n                key={x.name}\n                props={x}\n                register={register} />\n            :\n              <Input\n                key={x.name}\n                props={x}\n                register={register} />)\n        })}\n        {fields.map((x,i) => {\n          return (\n            <Input\n              key={x.id}\n              props={{\n                type: 'text',\n                focus: true,\n                name:`options.${i}.description`,\n                label: `Option ${i+1}`}}\n              register={register} />\n          )\n        })}\n      </form>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}