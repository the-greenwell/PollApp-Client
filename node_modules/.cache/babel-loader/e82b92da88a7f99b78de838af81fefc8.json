{"ast":null,"code":"var _jsxFileName = \"/Users/anthonyg/Desktop/vote_share/client/src/containers/PollContainer.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function PollContainer(_ref) {\n  let {\n    props\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: Object.keys(props.data).map(data => {\n      return data === 'options' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [data, \" : \", props.data[data].map(opt => {\n          /*#__PURE__*/\n          _jsxDEV(\"small\", {\n            children: [\" \", props.data[data].opt, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 6,\n            columnNumber: 53\n          }, this);\n        }), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 6,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [data, \" : \", props.data[data]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false);\n}\n_c = PollContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PollContainer\");","map":{"version":3,"sources":["/Users/anthonyg/Desktop/vote_share/client/src/containers/PollContainer.js"],"names":["PollContainer","props","Object","keys","data","map","opt"],"mappings":";;;AAAA,eAAe,SAASA,aAAT,OAA+B;AAAA,MAAR;AAACC,IAAAA;AAAD,GAAQ;AAC5C,sBACE;AAAA,cACIC,MAAM,CAACC,IAAP,CAAYF,KAAK,CAACG,IAAlB,EAAwBC,GAAxB,CAA4BD,IAAI,IAAI;AACpC,aAAOA,IAAI,KAAK,SAAT,gBACL;AAAA,mBAAIA,IAAJ,SAAaH,KAAK,CAACG,IAAN,CAAWA,IAAX,EAAiBC,GAAjB,CAAqBC,GAAG,IAAI;AAAC;AAAA;AAAA,4BAASL,KAAK,CAACG,IAAN,CAAWA,IAAX,EAAiBE,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC,SAArE,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA,cADK,gBAGL;AAAA,mBAAIF,IAAJ,SAAaH,KAAK,CAACG,IAAN,CAAWA,IAAX,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAID,KALC;AADJ,mBADF;AAUD;KAXuBJ,a","sourcesContent":["export default function PollContainer({props}){\n  return(\n    <>\n      { Object.keys(props.data).map(data => {\n        return data === 'options' ?\n          <p>{data} : {props.data[data].map(opt => {<small> {props.data[data].opt} </small>})} </p>\n        :\n          <p>{data} : {props.data[data]}</p>\n      }) }\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}