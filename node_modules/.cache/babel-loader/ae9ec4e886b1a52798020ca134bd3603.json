{"ast":null,"code":"var _jsxFileName = \"/Users/anthonyg/Desktop/vote_share/client/src/components/PollForm.js\",\n    _s = $RefreshSig$();\n\nimport Select from './Select';\nimport Input from './Input';\nimport '../styles/form.css';\nimport { newPollFields, updatePollFields } from '../helpers.js';\nimport { FormContext } from '../containers/HomeContainer';\nimport { PollContext } from '../PollContext';\nimport PollService from '../poll.service.js';\nimport { useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function PollForm(_ref) {\n  _s();\n\n  let {\n    props\n  } = _ref;\n  const [formFields, setFields] = useState([]);\n  const [options, setOptionsTotal] = useState(2);\n  const formProps = useContext(FormContext);\n  const [poll, setPoll] = useContext(PollContext).poll;\n  const navigate = useNavigate();\n  const validationSchema = Yup.object().shape({\n    subject: Yup.string().required('\"Subject\" is required'),\n    password: Yup.string().required('\"Password\" is required').min(6, 'Password must be 6 characters').oneOf([Yup.ref('confirmPassword')], 'Passwords must match'),\n    confirmPassword: Yup.string().required('\"Confirm Password\" is required').oneOf([Yup.ref('password')], 'Passwords must match'),\n    format: Yup.string().default('default'),\n    expires: Yup.number().typeError('\"Expires\" must be a valid number').positive().integer().default(5),\n    options: Yup.array().of(Yup.object().shape({\n      description: Yup.string().typeError('\"Option\" invalid').test('description', 'This field is required', opt => {\n        return opt.trim() ? true : false;\n      })\n    }))\n  });\n  const formOptions = {\n    resolver: yupResolver(validationSchema)\n  };\n  const {\n    handleSubmit,\n    register,\n    control,\n    reset,\n    formState\n  } = useForm(formOptions);\n  const {\n    errors\n  } = formState;\n  const {\n    fields,\n    append,\n    remove\n  } = useFieldArray({\n    name: 'options',\n    control\n  });\n  useEffect(() => {\n    formProps.type === 'newPoll' ? setFields(newPollFields) : setFields(updatePollFields);\n    setOptionsTotal(2);\n  }, []);\n  useEffect(() => {\n    const oldVal = fields.length;\n\n    if (options > oldVal && oldVal < 8 || oldVal < 2) {\n      for (let i = oldVal; i < options; i++) {\n        append({\n          description: ''\n        });\n      }\n    } else {\n      for (let i = oldVal; i > options; i--) {\n        remove(i - 1);\n      }\n    }\n  }, [options]);\n\n  const increaseOptions = e => {\n    e.preventDefault();\n    if (options < 8) setOptionsTotal(options + 1);\n  };\n\n  const decreaseOptions = e => {\n    e.preventDefault();\n    if (options > 2) setOptionsTotal(options - 1);\n  };\n\n  const dateFormat = date => {};\n\n  const onSubmit = data => {\n    PollService.newPoll(data).then(createdPoll => {\n      setPoll(createdPoll.poll);\n      navigate('/poll/' + createdPoll.poll._id);\n    }).catch(err => {\n      console.log(err);\n      navigate('/newpoll');\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [formProps.type === 'newPoll' ? /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increaseOptions,\n        children: \"Add Option\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decreaseOptions,\n        children: \"Delete Option\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }, this) : '', formFields.map((x, i) => {\n      var _errors$x$name;\n\n      return x.type === 'select' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Select, {\n          props: x,\n          register: register\n        }, x.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"is-invalid\",\n          children: (_errors$x$name = errors[x.name]) === null || _errors$x$name === void 0 ? void 0 : _errors$x$name.message\n        }, `error-${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(Input, {\n        props: x,\n        register: register\n      }, x.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }, this);\n    }), fields.map((x, i) => {\n      var _errors$options, _errors$options$i, _errors$options$i$des;\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          props: {\n            type: 'text',\n            focus: true,\n            name: `options.${i}.description`,\n            label: `Option ${i + 1}`\n          },\n          register: register\n        }, x.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"is-invalid\",\n          children: (_errors$options = errors.options) === null || _errors$options === void 0 ? void 0 : (_errors$options$i = _errors$options[i]) === null || _errors$options$i === void 0 ? void 0 : (_errors$options$i$des = _errors$options$i.description) === null || _errors$options$i$des === void 0 ? void 0 : _errors$options$i$des.message\n        }, `error-${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 7\n  }, this);\n}\n\n_s(PollForm, \"4p9nNDFTNQEMOobE38rd4UOgE3w=\", false, function () {\n  return [useNavigate, useForm, useFieldArray];\n});\n\n_c = PollForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PollForm\");","map":{"version":3,"sources":["/Users/anthonyg/Desktop/vote_share/client/src/components/PollForm.js"],"names":["Select","Input","newPollFields","updatePollFields","FormContext","PollContext","PollService","useState","useEffect","useContext","useNavigate","useForm","useFieldArray","yupResolver","Yup","PollForm","props","formFields","setFields","options","setOptionsTotal","formProps","poll","setPoll","navigate","validationSchema","object","shape","subject","string","required","password","min","oneOf","ref","confirmPassword","format","default","expires","number","typeError","positive","integer","array","of","description","test","opt","trim","formOptions","resolver","handleSubmit","register","control","reset","formState","errors","fields","append","remove","name","type","oldVal","length","i","increaseOptions","e","preventDefault","decreaseOptions","dateFormat","date","onSubmit","data","newPoll","then","createdPoll","_id","catch","err","console","log","map","x","message","focus","label","id"],"mappings":"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","sourcesContent":["import Select from './Select'\nimport Input from './Input'\nimport '../styles/form.css'\nimport { newPollFields, updatePollFields } from '../helpers.js'\nimport { FormContext } from '../containers/HomeContainer'\nimport { PollContext } from '../PollContext'\nimport PollService from '../poll.service.js'\n\nimport { useState, useEffect, useContext } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useForm, useFieldArray } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\n\nexport default function PollForm({ props }){\n    const [formFields,setFields] = useState([]);\n    const [options,setOptionsTotal] = useState(2);\n\n    const formProps = useContext(FormContext)\n    const [poll,setPoll] = useContext(PollContext).poll\n    const navigate = useNavigate();\n\n    const validationSchema = Yup.object().shape({\n      subject: Yup.string().required('\"Subject\" is required'),\n      password: Yup.string().required('\"Password\" is required').min(6, 'Password must be 6 characters').oneOf([Yup.ref('confirmPassword')], 'Passwords must match'),\n      confirmPassword: Yup.string().required('\"Confirm Password\" is required').oneOf([Yup.ref('password')], 'Passwords must match'),\n      format: Yup.string().default('default'),\n      expires: Yup.number().typeError('\"Expires\" must be a valid number').positive().integer().default(5),\n      options: Yup.array().of(\n        Yup.object().shape({\n          description: Yup.string().typeError('\"Option\" invalid').test('description', 'This field is required', (opt) => {\n            return opt.trim() ? true : false;\n          })\n        })\n      )\n    });\n    const formOptions = {resolver: yupResolver(validationSchema)}\n\n    const {\n      handleSubmit,\n      register,\n      control,\n      reset,\n      formState\n    } = useForm(formOptions)\n    const { errors } = formState;\n    const { fields, append, remove } = useFieldArray({name: 'options', control})\n\n\n    useEffect(()=>{\n      formProps.type === 'newPoll' ?\n          setFields(newPollFields) : setFields(updatePollFields);\n      setOptionsTotal(2);\n    },[])\n\n    useEffect(() => {\n       const oldVal = fields.length;\n       if (options > oldVal && oldVal < 8 || oldVal < 2) {\n           for (let i = oldVal; i < options; i++) {\n               append({description: ''});\n           }\n       } else {\n           for (let i = oldVal; i > options; i--) {\n               remove(i - 1);\n           }\n       }\n    }, [options]);\n\n    const increaseOptions = (e) => {\n      e.preventDefault();\n      if(options < 8) setOptionsTotal(options + 1)\n    }\n\n    const decreaseOptions = (e) => {\n      e.preventDefault();\n      if(options > 2) setOptionsTotal(options - 1)\n    }\n\n    const dateFormat = (date) => {\n      \n    }\n\n    const onSubmit = (data) => {\n      PollService.newPoll(data).then((createdPoll) => {\n        setPoll(createdPoll.poll)\n        navigate('/poll/'+createdPoll.poll._id)\n      }).catch((err)=>{\n        console.log(err)\n        navigate('/newpoll')\n      })\n    }\n\n    return(\n      <form className='form' onSubmit={handleSubmit(onSubmit)}>\n        { formProps.type === 'newPoll'  ?  (\n          <span>\n            <button onClick={increaseOptions}>Add Option</button>\n            <button onClick={decreaseOptions}>Delete Option</button>\n            <button type='submit'>Submit Form</button>\n          </span>\n        ) : ''}\n        {formFields.map((x,i) => {\n          return (\n            x.type === 'select' ?\n              (\n                <>\n                <Select\n                  key={x.name}\n                  props={x}\n                  register={register} />\n                <div className=\"is-invalid\" key={`error-${i}`}>{errors[x.name]?.message}</div>\n                </>\n              )\n            :\n            (\n              <Input\n                key={x.name}\n                props={x}\n                register={register}/>\n            )\n          )\n        })}\n        {fields.map((x,i) => {\n          return (\n            <>\n              <Input\n                key={x.id}\n                props={{\n                  type: 'text',\n                  focus: true,\n                  name:`options.${i}.description`,\n                  label: `Option ${i+1}`}}\n                register={register} />\n              <div className=\"is-invalid\" key={`error-${i}`}>{errors.options?.[i]?.description?.message}</div>\n            </>\n          )\n        })}\n      </form>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}